<?php
/**
 * struct for bitwig preset
 */
class bitwigPreset
{
    public $file;
    public $vstid;
    public $vstversion;
    public $creator;
    public $device_name;
    public $device_creator;
    public $preset_category;
    public $name;
    public $comment;
    public $tags;
    public $zipcontent;
}

/**
 * @param string $path
 * @param string $filetype
 * @param bool $ret
 * @return bool
 */
function bitwigFetchAllFiles($path, $filetype = "fxp", $ret = false)
{
    $files = scandir($path);
    foreach ($files as $k => $v) {
        if (in_array($v, array('.', '..'))) {
            //nothing to do
        } else if (is_file($path . "\\" . $v) && preg_match('~\.' . preg_quote($filetype) . '$~', $v)) {
            $ret[] = $path . "\\" . $v;
        } else if (is_dir($path . "\\" . $v)) {
            $ret = bitwigFetchAllFiles($path . "\\" . $v, $filetype, $ret);
        }
    }
    return $ret;
}

/**
 * @param string $pluginid
 * @param int $pluginversionid
 * @param int $parametercount
 * @param string $content
 * @return string
 */
function bitwigCreateFXP($pluginid, $pluginversionid, $parametercount, $content)
{
    $data = 'CcnK'; //vst fxp patch
    $data .= pack("N", strlen($content) + 0x34); //size of content + some of header
    $data .= 'FPCh'; //plugin program
    $data .= pack("N", 1); //version

    $data .= $pluginid; //plugin id
    $data .= pack("N", $pluginversionid); //plugin version
    $data .= pack("N", $parametercount); //count of parameters

    $data .= str_pad("", 28, "\0");
    $data .= pack("N", strlen($content)); //size of avgr preset
    $data .= $content;

    return $data;
}

/**
 * @param string $pluginid
 * @param int $pluginversionid
 * @param int $parametercount
 * @param string $content
 * @return string
 */
function bitwigCreateFXP2($pluginid, $pluginversionid, $parametercount, $content)
{
    $data = 'CcnK'; //vst fxp patch
    $data .= pack("N", strlen($content) + 0x98); //size of content + some of header
    $data .= 'FPCh'; //plugin program
    $data .= pack("N", 2); //version

    $data .= $pluginid; //plugin id
    $data .= pack("N", $pluginversionid); //plugin version
    $data .= pack("N", $parametercount); //count of parameters

    $data .= str_pad("", 128, "\0");
    $data .= pack("N", strlen($content)); //size of avgr preset
    $data .= $content;

    return $data;
}

/**
 * @param bitwigPreset $preset
 * @param array $config
 * @return bitwigPreset
 */
function bitwigDetectMeta($preset, $config)
{
    foreach ($config as $k => $v) {
        if (preg_match('~^metaregex[0-9]*$~', $k)) {
            if (preg_match($v, $preset->file, $ret)) {
                if (isset($ret['category'])) {
                    $preset->preset_category = $ret['category'];
                }
                if (isset($ret['creator'])) {
                    $preset->creator = $ret['creator'];
                }
            }
        }
    }
    //auto detect tags
    if (preg_match("~bright~i", $preset->name)) {
        $preset->tags[] = "bright";
    }

    if (preg_match("~(voice|choir)~i", $preset->name)) {
        $preset->tags[] = "voice";
    }

    if (preg_match("~dark~i", $preset->name)) {
        $preset->tags[] = "dark";
    }

    if (preg_match("~slow~i", $preset->name)) {
        $preset->tags[] = "slow";
    }

    if (preg_match("~fast~i", $preset->name)) {
        $preset->tags[] = "fast";
    }

    if (preg_match("~soft~i", $preset->name)) {
        $preset->tags[] = "soft";
    }

    if (preg_match("~hard~i", $preset->name)) {
        $preset->tags[] = "hard";
    }

    if (preg_match("~poly~i", $preset->name)) {
        $preset->tags[] = "poly";
    }

    if (preg_match("~chord~i", $preset->name)) {
        $preset->tags[] = "chord";
    }

    if (preg_match("~analog~i", $preset->name)) {
        $preset->tags[] = "analog";
    }

    if (preg_match("~digital~i", $preset->name)) {
        $preset->tags[] = "digital";
    }

    if (preg_match("~glide~i", $preset->name)) {
        $preset->tags[] = "glide";
    }

    //bestimmte wÃ¶rter konvertieren
    if (preg_match('~Ambient Sounds~', $preset->preset_category)) {
        $preset->preset_category = 'Ambient Sounds';
    }

    switch ($preset->preset_category) {
        case 'Choir':
            $preset->tags[] = "voice";
            break;
        case 'Ambient Sounds':
        case 'Atmospheres':
        case 'Textures':
            $preset->preset_category = 'Drone';
            break;
        case 'Basses':
            $preset->preset_category = 'Bass';
            break;
        case 'Acid':
            $preset->preset_category = 'Bass';
            $preset->tags[] = "acid";
            break;
        case 'Leads':
            $preset->preset_category = 'Lead';
            break;
        case 'Pads':
            $preset->preset_category = 'Pad';
            break;
        case 'Gated':
        case 'Trancegate':
            $preset->preset_category = 'Synth';
            $preset->tags[] = "trancegate";
            break;
        case 'Arp':
            $preset->preset_category = 'Arps';
            break;
        case 'Pianos':
            $preset->preset_category = 'Piano';
            break;
        case 'String':
            $preset->preset_category = 'Strings';
            break;
        case 'Pluck':
        case 'Plucked':
            $preset->preset_category = 'Plucks';
            break;
        case 'Chords':
            $preset->preset_category = 'Synth';
            $preset->tags[] = "chord";
            break;
        case 'Sound FX':
        case 'Effect':
        case 'SFX':
        case 'Effects':
            $preset->preset_category = 'FX';
            break;
        case 'Bells':
            $preset->preset_category = 'Bell';
            break;
        case 'Synthesizer':
        case 'Synths':
            $preset->preset_category = 'Synth';
            break;
        case 'Voice':
            $preset->preset_category = 'Synth';
            $preset->tags[] = "voice";
            break;
        case 'Bass (Hard)':
            $preset->preset_category = 'Bass';
            $preset->tags[] = "hard";
            break;
        case 'Modulated Bass':
            $preset->preset_category = 'Bass';
            $preset->tags[] = "modulated";
            break;
        case 'Sequence':
            $preset->preset_category = 'Sequences';
            break;
        case 'Keyboard':
            $preset->preset_category = 'Keyboards';
            break;
        case 'Piano & Keys':
            $preset->preset_category = 'Piano';
            if (preg_match('~^KB~', $preset->name)) {
                $preset->preset_category = 'Keyboards';
            }
            break;
    }

    if (is_array($preset->tags) && count($preset->tags) > 1) {
        $preset->tags = array_unique($preset->tags);
    }

    return $preset;
}

/**
 * @param bitwigPreset $preset
 * @return string
 */
function bitwigCreatePatch($preset)
{
    $chunk = '';
    $chunk .= pack("N", 4);
    $chunk .= pack("N", 4);
    $chunk .= 'meta';
    $chunkdata = array(
        'application_version_name' => "1.3.15",
        'branch' => "release/1.3",
        'comment' => $preset->comment,
        'creator' => $preset->creator,
        'device_category' => "Synth",
        'device_creator' => $preset->device_creator,
        'device_id' => "vst:" . (string) (unpack('N', $preset->vstid)[1]) . ":" . (string) $preset->vstversion,
        'device_name' => $preset->device_name,
        'device_type' => "note_to_audio",
        'preset_category' => $preset->preset_category,
        'referenced_device_ids' => array(0x19, 0, 0, 0, 0),
        'referenced_packaged_file_ids' => array(0x19, 0, 0, 0, 0),
        'revision_id' => "a017b4cd16e95f9efb2ecea10e2389f26fdb50d5",
        'revision_no' => array(0x3, 0, 0, 0xb9, 0x65),
        'tags' => is_array($preset->tags) ? implode(' ', $preset->tags) : $preset->tags,
        'type' => "application/bitwig-preset",
    );
    foreach ($chunkdata as $k => $v) {
        if (is_string($v)) {
            $chunk .= pack("N", 1);
            $chunk .= pack("N", strlen($k));
            $chunk .= $k;
            $chunk .= pack("C", 8);
            $chunk .= pack("N", strlen($v));
            $chunk .= $v;
        } else if (is_array($v)) {
            $chunk .= pack("N", 1);
            $chunk .= pack("N", strlen($k));
            $chunk .= $k;
            foreach ($v as $vv) {
                $chunk .= pack("C", $vv);
            }
        }
    }
    $chunk .= pack("N", 0);

    $chunk2 = '';
    $chunkdata2 = array(
        array(0xa, 0, 0, 0x5, 0x61),
        array(0, 0, 0x14, 0x23, 0x5, 0),
        array(0, 0, 0x15, 0xa, 0x5, 1),
        array(0, 0, 0x14, 0x21, 0x9, 0, 0, 1, 0xa5),
        '2b9 str' => '',
        '12de str' => $preset->name,
        '9a str' => $preset->device_name,
        '1559 str' => '',
        '9b str' => $preset->device_creator,
        '9c str' => 'Synth',
        array(0, 0, 0, 0x9d, 1, 2),
        '9e str' => $preset->creator,
        '9f str' => $preset->comment,
        'a1 str' => $preset->preset_category,
        'a2 str' => is_array($preset->tags) ? implode(' ', $preset->tags) : $preset->tags,
        array(0x00, 0x00, 0x00, 0xa3, 0x05, 0x01, 0x00, 0x00, 0x13, 0x7e, 0x05, 0x01, 0x00, 0x00, 0x0e, 0x31, 0x12, 0x00, 0x00, 0x02, 0xfb, 0x00, 0x00, 0x02, 0xb9, 0x08, 0x00, 0x00, 0x00, 0x06, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x30, 0x00, 0x00, 0x0e, 0x1c, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x24, 0x09, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x02, 0xb9, 0x08, 0x00, 0x00, 0x00, 0x06, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x00, 0x00, 0x01, 0x36, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x42, 0x09, 0x00, 0x00, 0x02, 0xfc, 0x00, 0x00, 0x02, 0xb9, 0x08, 0x00, 0x00, 0x00, 0x06, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x00, 0x00, 0x0e, 0x20, 0x12, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x1d, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xfb, 0x00, 0x00, 0x02, 0xb9, 0x08, 0x00, 0x00, 0x00, 0x06, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x31, 0x00, 0x00, 0x0e, 0x1c, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x24, 0x09, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x02, 0xb9, 0x08, 0x00, 0x00, 0x00, 0x06, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x00, 0x00, 0x01, 0x36, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x42, 0x09, 0x00, 0x00, 0x02, 0xfc, 0x00, 0x00, 0x02, 0xb9, 0x08, 0x00, 0x00, 0x00, 0x06, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x00, 0x00, 0x0e, 0x20, 0x12, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x1d, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xfb, 0x00, 0x00, 0x02, 0xb9, 0x08, 0x00, 0x00, 0x00, 0x06, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x32, 0x00, 0x00, 0x0e, 0x1c, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x24, 0x09, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x02, 0xb9, 0x08, 0x00, 0x00, 0x00, 0x06, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x00, 0x00, 0x01, 0x36, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x42, 0x09, 0x00, 0x00, 0x02, 0xfc, 0x00, 0x00, 0x02, 0xb9, 0x08, 0x00, 0x00, 0x00, 0x06, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x00, 0x00, 0x0e, 0x20, 0x12, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x1d, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xfb, 0x00, 0x00, 0x02, 0xb9, 0x08, 0x00, 0x00, 0x00, 0x06, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x33, 0x00, 0x00, 0x0e, 0x1c, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x24, 0x09, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x02, 0xb9, 0x08, 0x00, 0x00, 0x00, 0x06, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x00, 0x00, 0x01, 0x36, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x42, 0x09, 0x00, 0x00, 0x02, 0xfc, 0x00, 0x00, 0x02, 0xb9, 0x08, 0x00, 0x00, 0x00, 0x06, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x00, 0x00, 0x0e, 0x20, 0x12, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x1d, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xfb, 0x00, 0x00, 0x02, 0xb9, 0x08, 0x00, 0x00, 0x00, 0x06, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x34, 0x00, 0x00, 0x0e, 0x1c, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x24, 0x09, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x02, 0xb9, 0x08, 0x00, 0x00, 0x00, 0x06, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x00, 0x00, 0x01, 0x36, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x42, 0x09, 0x00, 0x00, 0x02, 0xfc, 0x00, 0x00, 0x02, 0xb9, 0x08, 0x00, 0x00, 0x00, 0x06, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x00, 0x00, 0x0e, 0x20, 0x12, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x1d, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xfb, 0x00, 0x00, 0x02, 0xb9, 0x08, 0x00, 0x00, 0x00, 0x06, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x35, 0x00, 0x00, 0x0e, 0x1c, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x24, 0x09, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x02, 0xb9, 0x08, 0x00, 0x00, 0x00, 0x06, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x00, 0x00, 0x01, 0x36, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x42, 0x09, 0x00, 0x00, 0x02, 0xfc, 0x00, 0x00, 0x02, 0xb9, 0x08, 0x00, 0x00, 0x00, 0x06, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x00, 0x00, 0x0e, 0x20, 0x12, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x1d, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xfb, 0x00, 0x00, 0x02, 0xb9, 0x08, 0x00, 0x00, 0x00, 0x06, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x36, 0x00, 0x00, 0x0e, 0x1c, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x24, 0x09, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x02, 0xb9, 0x08, 0x00, 0x00, 0x00, 0x06, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x00, 0x00, 0x01, 0x36, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x42, 0x09, 0x00, 0x00, 0x02, 0xfc, 0x00, 0x00, 0x02, 0xb9, 0x08, 0x00, 0x00, 0x00, 0x06, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x00, 0x00, 0x0e, 0x20, 0x12, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x1d, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xfb, 0x00, 0x00, 0x02, 0xb9, 0x08, 0x00, 0x00, 0x00, 0x06, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x37, 0x00, 0x00, 0x0e, 0x1c, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x24, 0x09, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x02, 0xb9, 0x08, 0x00, 0x00, 0x00, 0x06, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x00, 0x00, 0x01, 0x36, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x42, 0x09, 0x00, 0x00, 0x02, 0xfc, 0x00, 0x00, 0x02, 0xb9, 0x08, 0x00, 0x00, 0x00, 0x06, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x00, 0x00, 0x0e, 0x20, 0x12, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x1d, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x17, 0xcd, 0x0a, 0x00, 0x00, 0x0c, 0x5a, 0x09, 0x00, 0x00, 0x02, 0xb4, 0x00, 0x00, 0x0c, 0x5b, 0x12, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00),
        'ce4 u32' => (unpack('N', $preset->vstid)[1]),
        'c5e u32' => $preset->vstversion,
        'be5 str' => md5($preset->file) . '.fxp',
        array(0x00, 0x00, 0x13, 0x18, 0x12, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x14, 0x1b, 0x01, 0x00, 0x00, 0x00, 0x14, 0x1c, 0x01, 0x22, 0x00, 0x00, 0x14, 0x1d, 0x05, 0x01, 0x00, 0x00, 0x14, 0x1e, 0x05, 0x01, 0x00, 0x00, 0x13, 0x7a, 0x09, 0x00, 0x00, 0x03, 0x7c, 0x00, 0x00, 0x02, 0xb9, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xff, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x7c, 0x09, 0x00, 0x00, 0x04, 0xf3, 0x00, 0x00, 0x02, 0xb9, 0x08, 0x00, 0x00, 0x00, 0x0d, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x53, 0x00, 0x00, 0x08, 0xe0, 0x12, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0xfa, 0x09, 0x00, 0x00, 0x02, 0x4e, 0x00, 0x00, 0x02, 0xb9, 0x08, 0x00, 0x00, 0x00, 0x06, 0x4f, 0x55, 0x54, 0x5f, 0x46, 0x58, 0x00, 0x00, 0x08, 0xe1, 0x09, 0x00, 0x00, 0x01, 0x8f, 0x00, 0x00, 0x02, 0xb9, 0x08, 0x00, 0x00, 0x00, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x08, 0xdf, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x49, 0x09, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x02, 0xb9, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x12, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x25, 0x0a, 0x00, 0x00, 0x13, 0x81, 0x05, 0x01, 0x00, 0x00, 0x15, 0x05, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x33, 0x01, 0x02, 0x00, 0x00, 0x18, 0x09, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x22, 0x12, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00),
    );
    foreach ($chunkdata2 as $k => $v) {
        if (is_string($k)) {
            $k = explode(' ', $k);
            $chunk2 .= pack("N", hexdec($k[0]));
            switch ($k[1]) {
                case 'u32':
                    $chunk2 .= pack("C", 3);
                    $chunk2 .= pack("N", $v);
                    break;
                case 'str':
                    $chunk2 .= pack("C", 8);
                    $chunk2 .= pack("N", strlen($v));
                    $chunk2 .= $v;
                    break;
            }
        } else {
            foreach ($v as $vv) {
                $chunk2 .= pack("C", $vv);
            }
        }
    }

    $data = 'BtWg0001000200790000';
    $data .= sprintf("%04X", strlen($chunk) + 40);
    $data .= '000000000000';
    $data .= sprintf("%04X", strlen($chunk) + strlen($chunk2) + 40);

    return $data . $chunk . $chunk2 . $preset->zipcontent;
}
